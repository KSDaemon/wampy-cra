{"version":3,"sources":["../src/wampy-cra.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAaA,CACI,OAAO,MAAP,KAAkB,UAAlB,GAA+B,UAAU,CAAV,EAAa;AACxC,WAAO,UAAP,EAAmB,CAAnB;AACH,CAFD,GAGI,QAAO,OAAP,yCAAO,OAAP,OAAmB,QAAnB,GAA8B,UAAU,CAAV,EAAa;AACvC,WAAO,OAAP,GAAiB,GAAjB;AACH,CAFD,GAGI,UAAU,CAAV,EAAa;AACT,SAAK,QAAL,GAAgB,GAAhB;AACH,CATb,EAUE,YAAY;;AAEV,QAAM,WAAW,EAAjB;QACI,SAAU,QAAO,OAAP,yCAAO,OAAP,OAAmB,QAAnB,IAA+B,OAAO,SAAP,CAAiB,QAAjB,CAA0B,IAA1B,CAA+B,OAA/B,MAA4C,kBADzF;QAEI,SAAS,SAAS,QAAQ,QAAR,CAAT,GAA6B,QAAQ,WAAR,CAF1C;;AAIA,aAAS,UAAT,CAAqB,MAArB,EAA6B,IAA7B,EAAmE;AAAA,YAAhC,UAAgC,yDAAnB,IAAmB;AAAA,YAAb,MAAa,yDAAJ,EAAI;;AAC/D,YAAI,YAAJ;;AAEA,YAAI,MAAJ,EAAY;AACR,kBAAM,OAAO,UAAP,CAAkB,MAAlB,EAA0B,IAA1B,EAAgC,UAAhC,EAA4C,MAA5C,EAAoD,QAApD,CAAN;AACA,mBAAO,IAAI,QAAJ,CAAa,QAAb,CAAP;AACH,SAHD,MAGO;AACH,gBAAI,SAAS;AACT,yBAAY,SAAS,CADZ;AAET,4BAAY,UAFH;AAGT,wBAAY,OAAO,IAAP,CAAY;AAHf,aAAb;;AAMA,kBAAM,OAAO,MAAP,CAAc,MAAd,EAAsB,IAAtB,EAA4B,MAA5B,CAAN;AACA,mBAAO,IAAI,QAAJ,CAAa,OAAO,GAAP,CAAW,MAAxB,CAAP;AACH;AACJ;;AAED,aAAS,IAAT,CAAe,GAAf,EAAoB,SAApB,EAA+B;AAC3B,YAAI,MAAJ,EAAY;AACR,gBAAI,OAAO,OAAO,UAAP,CAAkB,QAAlB,EAA4B,GAA5B,CAAX;AACA,iBAAK,MAAL,CAAY,SAAZ;AACA,mBAAO,KAAK,MAAL,CAAY,QAAZ,CAAP;AACH,SAJD,MAIO;AACH,mBAAO,OAAO,UAAP,CAAkB,SAAlB,EAA6B,GAA7B,EAAkC,QAAlC,CAA2C,OAAO,GAAP,CAAW,MAAtD,CAAP;AACH;AACJ;;AAED,aAAS,IAAT,CAAe,MAAf,EAAuB;;AAEnB,eAAO,UAAU,MAAV,EAAkB,IAAlB,EAAwB;AAC3B,gBAAI,WAAW,SAAf,EAA0B;;AAEtB,oBAAI,KAAK,IAAT,EAAe;AACX,2BAAO,KAAK,WAAW,MAAX,EAAmB,KAAK,IAAxB,EAA8B,KAAK,UAAnC,EAA+C,KAAK,MAApD,CAAL,EAAkE,KAAK,SAAvE,CAAP;AACH,iBAFD,MAEO;AACH,2BAAO,KAAK,MAAL,EAAa,KAAK,SAAlB,CAAP;AACH;AAEJ,aARD,MAQO;AACH,sBAAM,IAAI,KAAJ,CAAU,0CAAV,CAAN;AACH;AACJ,SAZD;AAaH;;AAED,aAAS,UAAT,GAAsB,UAAtB;AACA,aAAS,IAAT,GAAgB,IAAhB;AACA,aAAS,IAAT,GAAgB,IAAhB;;AAEA,WAAO,QAAP;AAEH,CAnED","file":"wampy-cra.js","sourcesContent":["/**\n * Project: wampy-cra.js\n *\n * https://github.com/KSDaemon/wampy-cra\n *\n * Wampy.js Challenge Response Authentication plugin\n *\n * Copyright 2016 KSDaemon. Licensed under the MIT License.\n * See @license text at http://www.opensource.org/licenses/mit-license.php\n *\n */\n\n// Module boilerplate to support browser globals and browserify and AMD.\n(\n    typeof define === 'function' ? function (m) {\n        define('WampyCra', m);\n    } :\n        typeof exports === 'object' ? function (m) {\n            module.exports = m();\n        } :\n            function (m) {\n                this.WampyCra = m();\n            }\n)(function () {\n\n    const WampyCra = {},\n        isNode = (typeof process === 'object' && Object.prototype.toString.call(process) === '[object process]'),\n        crypto = isNode ? require('crypto') : require('crypto-js');\n\n    function derive_key (secret, salt, iterations = 1000, keylen = 32) {\n        let key;\n\n        if (isNode) {\n            key = crypto.pbkdf2Sync(secret, salt, iterations, keylen, 'sha256');\n            return key.toString('base64');\n        } else {\n            let config = {\n                keySize   : keylen / 4,\n                iterations: iterations,\n                hasher    : crypto.algo.SHA256\n            };\n\n            key = crypto.PBKDF2(secret, salt, config);\n            return key.toString(crypto.enc.Base64);\n        }\n    }\n\n    function sign (key, challenge) {\n        if (isNode) {\n            let hmac = crypto.createHmac('sha256', key);\n            hmac.update(challenge);\n            return hmac.digest('base64');\n        } else {\n            return crypto.HmacSHA256(challenge, key).toString(crypto.enc.Base64);\n        }\n    }\n\n    function auto (secret) {\n\n        return function (method, info) {\n            if (method === 'wampcra') {\n\n                if (info.salt) {\n                    return sign(derive_key(secret, info.salt, info.iterations, info.keylen), info.challenge);\n                } else {\n                    return sign(secret, info.challenge);\n                }\n\n            } else {\n                throw new Error('Unknown authentication method requested!');\n            }\n        };\n    }\n\n    WampyCra.derive_key = derive_key;\n    WampyCra.sign = sign;\n    WampyCra.auto = auto;\n\n    return WampyCra;\n\n});\n"]}