{"version":3,"sources":["../src/wampy-cra.js"],"names":["define","m","exports","module","WampyCra","isNode","process","Object","prototype","toString","call","crypto","require","derive_key","secret","salt","iterations","keylen","key","pbkdf2Sync","config","keySize","hasher","algo","SHA256","PBKDF2","enc","Base64","sign","challenge","hmac","createHmac","update","digest","HmacSHA256","auto","method","info","Error"],"mappings":";;;;AAAA;;;;;;;;;;;AAYA;AACA,CACI,OAAOA,MAAP,KAAkB,UAAlB,GAA+B,UAAUC,CAAV,EAAa;AACxCD,EAAAA,MAAM,CAAC,UAAD,EAAaC,CAAb,CAAN;AACH,CAFD,GAGI,QAAOC,OAAP,yCAAOA,OAAP,OAAmB,QAAnB,GAA8B,UAAUD,CAAV,EAAa;AACvCE,EAAAA,MAAM,CAACD,OAAP,GAAiBD,CAAC,EAAlB;AACH,CAFD,GAGI,UAAUA,CAAV,EAAa;AACT,OAAKG,QAAL,GAAgBH,CAAC,EAAjB;AACH,CATb,EAUE,YAAY;AAEV,MAAMG,QAAQ,GAAG,EAAjB;AAAA,MACIC,MAAM,GAAI,QAAOC,OAAP,yCAAOA,OAAP,OAAmB,QAAnB,IAA+BC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,OAA/B,MAA4C,kBADzF;AAAA,MAEIK,MAAM,GAAGN,MAAM,GAAGO,OAAO,CAAC,QAAD,CAAV,GAAuBA,OAAO,CAAC,WAAD,CAFjD;;AAIA,WAASC,UAAT,CAAqBC,MAArB,EAA6BC,IAA7B,EAAmE;AAAA,QAAhCC,UAAgC,uEAAnB,IAAmB;AAAA,QAAbC,MAAa,uEAAJ,EAAI;AAC/D,QAAIC,GAAG,SAAP;;AAEA,QAAIb,MAAJ,EAAY;AACRa,MAAAA,GAAG,GAAGP,MAAM,CAACQ,UAAP,CAAkBL,MAAlB,EAA0BC,IAA1B,EAAgCC,UAAhC,EAA4CC,MAA5C,EAAoD,QAApD,CAAN;AACA,aAAOC,GAAG,CAACT,QAAJ,CAAa,QAAb,CAAP;AACH,KAHD,MAGO;AACH,UAAIW,MAAM,GAAG;AACTC,QAAAA,OAAO,EAAKJ,MAAM,GAAG,CADZ;AAETD,QAAAA,UAAU,EAAEA,UAFH;AAGTM,QAAAA,MAAM,EAAMX,MAAM,CAACY,IAAP,CAAYC;AAHf,OAAb;AAMAN,MAAAA,GAAG,GAAGP,MAAM,CAACc,MAAP,CAAcX,MAAd,EAAsBC,IAAtB,EAA4BK,MAA5B,CAAN;AACA,aAAOF,GAAG,CAACT,QAAJ,CAAaE,MAAM,CAACe,GAAP,CAAWC,MAAxB,CAAP;AACH;AACJ;;AAED,WAASC,IAAT,CAAeV,GAAf,EAAoBW,SAApB,EAA+B;AAC3B,QAAIxB,MAAJ,EAAY;AACR,UAAIyB,IAAI,GAAGnB,MAAM,CAACoB,UAAP,CAAkB,QAAlB,EAA4Bb,GAA5B,CAAX;AACAY,MAAAA,IAAI,CAACE,MAAL,CAAYH,SAAZ;AACA,aAAOC,IAAI,CAACG,MAAL,CAAY,QAAZ,CAAP;AACH,KAJD,MAIO;AACH,aAAOtB,MAAM,CAACuB,UAAP,CAAkBL,SAAlB,EAA6BX,GAA7B,EAAkCT,QAAlC,CAA2CE,MAAM,CAACe,GAAP,CAAWC,MAAtD,CAAP;AACH;AACJ;;AAED,WAASQ,IAAT,CAAerB,MAAf,EAAuB;AAEnB,WAAO,UAAUsB,MAAV,EAAkBC,IAAlB,EAAwB;AAC3B,UAAID,MAAM,KAAK,SAAf,EAA0B;AAEtB,YAAIC,IAAI,CAACtB,IAAT,EAAe;AACX,iBAAOa,IAAI,CAACf,UAAU,CAACC,MAAD,EAASuB,IAAI,CAACtB,IAAd,EAAoBsB,IAAI,CAACrB,UAAzB,EAAqCqB,IAAI,CAACpB,MAA1C,CAAX,EAA8DoB,IAAI,CAACR,SAAnE,CAAX;AACH,SAFD,MAEO;AACH,iBAAOD,IAAI,CAACd,MAAD,EAASuB,IAAI,CAACR,SAAd,CAAX;AACH;AAEJ,OARD,MAQO;AACH,cAAM,IAAIS,KAAJ,CAAU,0CAAV,CAAN;AACH;AACJ,KAZD;AAaH;;AAEDlC,EAAAA,QAAQ,CAACS,UAAT,GAAsBA,UAAtB;AACAT,EAAAA,QAAQ,CAACwB,IAAT,GAAgBA,IAAhB;AACAxB,EAAAA,QAAQ,CAAC+B,IAAT,GAAgBA,IAAhB;AAEA,SAAO/B,QAAP;AAEH,CAnED","sourcesContent":["/**\n * Project: wampy-cra.js\n *\n * https://github.com/KSDaemon/wampy-cra\n *\n * Wampy.js Challenge Response Authentication plugin\n *\n * Copyright 2016 KSDaemon. Licensed under the MIT License.\n * See @license text at http://www.opensource.org/licenses/mit-license.php\n *\n */\n\n// Module boilerplate to support browser globals and browserify and AMD.\n(\n    typeof define === 'function' ? function (m) {\n        define('WampyCra', m);\n    } :\n        typeof exports === 'object' ? function (m) {\n            module.exports = m();\n        } :\n            function (m) {\n                this.WampyCra = m();\n            }\n)(function () {\n\n    const WampyCra = {},\n        isNode = (typeof process === 'object' && Object.prototype.toString.call(process) === '[object process]'),\n        crypto = isNode ? require('crypto') : require('crypto-js');\n\n    function derive_key (secret, salt, iterations = 1000, keylen = 32) {\n        let key;\n\n        if (isNode) {\n            key = crypto.pbkdf2Sync(secret, salt, iterations, keylen, 'sha256');\n            return key.toString('base64');\n        } else {\n            let config = {\n                keySize   : keylen / 4,\n                iterations: iterations,\n                hasher    : crypto.algo.SHA256\n            };\n\n            key = crypto.PBKDF2(secret, salt, config);\n            return key.toString(crypto.enc.Base64);\n        }\n    }\n\n    function sign (key, challenge) {\n        if (isNode) {\n            let hmac = crypto.createHmac('sha256', key);\n            hmac.update(challenge);\n            return hmac.digest('base64');\n        } else {\n            return crypto.HmacSHA256(challenge, key).toString(crypto.enc.Base64);\n        }\n    }\n\n    function auto (secret) {\n\n        return function (method, info) {\n            if (method === 'wampcra') {\n\n                if (info.salt) {\n                    return sign(derive_key(secret, info.salt, info.iterations, info.keylen), info.challenge);\n                } else {\n                    return sign(secret, info.challenge);\n                }\n\n            } else {\n                throw new Error('Unknown authentication method requested!');\n            }\n        };\n    }\n\n    WampyCra.derive_key = derive_key;\n    WampyCra.sign = sign;\n    WampyCra.auto = auto;\n\n    return WampyCra;\n\n});\n"],"file":"wampy-cra.js"}